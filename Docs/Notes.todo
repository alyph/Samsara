

TODO:

Gameplay:
	☐	figure out traits
	☐	timeline
	☐	new action execution sequence

	✔	give "living" cards health, this includes implementing the max health attribute (vitality?), health token (or wound token??) @done (17-06-17 16:27)
	✔	run onstart trigger for each card spawned, the living desc will then place tokens on the card @done (17-06-17 16:27)
	✔	melee attack, uses strength ability score (imp ability attr) to add wound tokens @done (17-06-22 20:59)
	✔	kill the card when health reduced to 0 @done (17-06-22 20:59)
	

	☐	descriptor should just contain the data (super descs, attributes, effects)
	✔	card will have a descriptor, and functions to modify that descriptor (like adding more super descriptors) @done (17-06-22 21:00)
	☐	card will also have an attribute collection which will be updated when desc changes, attached card changes, or status effect changes
	✔	attribute system, attribute definition, attribute value, attribute modifier and stack, attribute collection (a place caches and stores the final values and modifier stacks) @done (17-06-22 21:02)
	✔	simple number attribute, additive and multiplictive modifiers @done (17-06-22 21:02)
	✔	ability attribute, dual numbers (score and advantage points), additive and multiplicative modifiers applied to either or both points @done (17-06-22 21:02)
	✔	token attribute, integer number, no modifiers, but allow add or subtract values @done (17-06-22 21:02)
	✔	effects system, effects are mostly declarative, and different effects can be triggered at different timing, and excuted properly @done (17-06-22 21:03)
	✔	effect to apply modifiers @done (17-06-22 21:03)
	✔	effect to add remove tokens (attribute) @done (17-06-22 21:03)
	☐	triggers determine when the effects are applied. each different trigger may also restrict the types of effects allowed. triggers may contain meta data (e.g. conditions)
	✔	permenant trigger (for applying modifiers) (now named passive triggers) @done (17-06-22 21:03)
	☐	used in action trigger (applying modifiers to action)



	✔	archive create function should allow taking a single base object name. @done (16-12-11 20:18)
	✔	place a hero card @done (16-12-11 20:18)
	✔	draw a weapon card @done (16-12-13 22:07)
	✔	play the weapon card to attach to player @done (17-01-30 23:22)

	✔	area proxy, card proxy etc. @done (17-04-22 21:44)

	✔	descriptor+stats system (used by the card for now, may expand to other system) @done (17-05-25 20:51)
	✔	let the hero take action (probably just an attack) @done (17-06-22 21:04)


	✔	figure out how to show the cards assigned to heroes @done (17-05-25 20:51)
	✔	have a function to randomly generate bunch of heroes, their cards @done (17-04-30 14:48)
	✔	have a function to generate random monster encounter @done (17-05-08 20:25)





	✔	new UI layout (focus on where each area goes.) @done (17-06-22 21:04)
	✔	show party and encounter etc. (get the basic data setup) @done (17-06-22 21:04)
	
	☐	cards moving between areas
	☐	the encounter area needs to be split into groups (per affliation?), this can come late, for now, put everything in one group in one area

	☐	draw encounter location -> event -> features and NPCs
	☐	location (may come with some features)
	☐	events (may check valid location), events then summons required NPCs and features
	☐	additional features may be drawn
	
	☐	spawn a group of npcs (enemies mostly)
	☐	placement of party and npcs
	


	☐	place a monster card
	☐	hero take the attack action against the monster
	☐	damage calculation
	☐	monster takes action

	☐	after that move on to encounter, explore, draw location and encoutner etc.




	☐	action - investigate location (draw encounter from location, you may have multiple locations available)
	☐	action - leave manshion (exit the building and will be presented with new activities)
	☐	interaction - search scripts, investigate strange painting etc.

System:
	✔	play card sequence: select a hand card -> if not targeted play on field, otherwise select another card to validate, if valid, play the card -> execute card effects -> done @done (17-01-30 23:22)
	☐	action
		✔	timing (renamed to context) @done (17-01-30 23:22)
		☐	target criteria? (may not need, different action may have different need for this)
		✔	effects @done (17-01-30 23:22)
	☐	traits enable actions
	✔	attach card effect @done (17-01-30 23:22)
	☐	scripting system (plain data, no script language yet)

Optimization:
	☐	resolveNativeClass() pretty expensive, we should avoid creating dynamic function outside of the load time.

Archive:
	☐	 map object (will require custom value parsing system)
	☐	 when creating an instance off a template, shouldn't it just use that template's blueprint reproduce the new object rather than forming another blueprint then creating the new object from there? guess the concern is later saving, loading code may need handle this special case.
	☐	 constructor style object syntax
	☐	 list inheritance (for now just concatenate base and child lists, you can only add but not remove, should we still add a way to empty/reset?), maybe default to overwrite, but have a special syntax to indicate adding to the base array. (for example: myarray: +[ "added entry" ])
	☐	 allow lists to set a default base, so each individual items don't have to.
	☐	 consider refactoring the List, Blueprint, CustomValue code to have them point to the same base (maybe CompositeValue)
	☐	 loaded callback is not called on sub objects but should.
	☐	 find a better way to handle temporary objects spawned, probably should not keep a record, and let it garbage collected when not referenced. (the action card is an example)
	☐	 is there a way to give hint to the parser based on existing object's property type. for example if a property is a Map, maybe @map{} is not necessary, and can just use {} directly?

UI:
	☐	replace data with proxy, so even without proxy binding, the default proxy will be used.
	☐	allow a true/false attribute binding, if false, remove the attribute, otherwise assign the attribute with empty string (useful for css selector)
	☐	catch data binding errors (like missing properties)
	☐	may want to come up a way to move all the interaction flow from player class to the ui data
	☐	sprite image can use a custom css property for the sprite setting, like --sprite=sprite.name (does custom property support strings?)
	☐	data binding need support single quoted strings
	☐	overall need a better way to specify data, and have data interact with css and layout etc. allow ways to reference the objects in data files, basically treat UI as a special piece of data. maybe data binding shouldn't be bound to the native code properties, instead it should be bound to the exposed script functions? (will that add too much friction?)

	✔	proxy (syntax, parsing, registeration etc.) @done (17-04-06 20:27)

	✔	map directive (unordered, one-to-one, may not be able to reuse the existing elements, must detach and reattach new ones.) @done (17-04-06 21:43)
	
	☐	smarter data binding in scope, maybe form a scope chain of proxies, so inner scoped components will be able to access outer proxy as well. (perf is a concern)
	☐	consider to use css custom properties for some of the style configs used in AreaProxy


-----------------------------------------------------------------------

DATA REVAMP:
	✔	handle list @done (16-12-23 23:10)
	✔	reference resolving @done (16-12-23 23:10)
	✔	full procecss finish up (processPackages, WorkingRecord) @done (16-12-24 12:00)
	✔	dependency and sorting @done (16-12-24 21:25)
	✔	basic data parsing (object, list, value, expression...) @done (16-12-30 19:41)
	✔	compile package (taking output syntax tree from parsing) @done (17-01-01 17:37)
	✔	namespace combining rule (what if the namespace already specified env?) @done (17-01-01 20:33)
	✔	rule parsing (@import, base, namespace etc.) @done (17-01-01 19:13)
	✔	lexer @done (17-01-03 22:28)
	✔	GLP impl @done (17-01-03 22:28)
	✔	misc functions for package loading (ajax, path etc.) @done (17-01-04 21:32)
	✔	convert the sprites to use archive system @done (17-01-05 23:02)
	✔	package wide environment (instances vs definitions) defined by extension @done (17-01-07 13:53)
	✔	import -i/inst/instances to import instances package instead of definitions @done (17-01-07 13:53)
	✔	definition package cannot import instances (verify at processing level), definition objs cannot ref instances @done (17-01-07 13:53)
	✔	game init mechanism (GameSymbol.init, reloaded? etc.) @done (17-01-08 16:35)
	✔	fix game code to use the new Archive (entity init, get(), create() etc.) @done (17-01-08 16:35)
	✔	string quotes not removed... @done (17-01-08 16:35)
	☐	should we un-singleton Archive? make it an object owned by the game.
	☐	syntax highlighting
	☐	group references (e.g. ref all the objects in a namespace/package with a given type)
	

GAMEPLAY SCRIPT:



-----------------------------------------------------------------------


UI REVAMP:

	✔	directive parsing revamp (high level tokenizing) @done (16-10-11 21:52)
	✔	able to replace \# \{ @done (16-10-11 21:52)
	✔	parse directive expr @done (16-10-12 22:43)
	✔	parse data binding, text binding @done (16-10-13 22:05)
	✔	lexer @done (16-10-14 22:51)
	✔	fix data binding regex, likely will need split to open binding { and close } @done (16-10-15 15:56)
	✔	new function throw exception, need try catch @done (16-10-15 15:56)
	✔	directive config @done (16-10-15 22:04)
	✔	clause group, content (what happens if they are "") @done (16-10-15 22:11)
	✔	escaped blah, doesn't need 3 different token types, just merge them all. @done (16-10-15 22:28)

	✔	element binding (property, attribute, event) @done (16-10-19 22:12)
	✔	runtime instance hookup (traverse path, binding, directive instances) @done (16-10-19 22:12)
	✔	impl all the binding functions @done (16-10-19 22:12)
	✔	impl all other component functions @done (16-10-19 22:32)

	✔	clean up template and element to use component  @done (16-10-24 22:50)

	✔	template header element parsing (treat it like a normal element node, not custom element), this should be able to handle <sprite-img> @done (16-10-26 20:23)
	☐	template dependencies fix (should ignore directive dependencies? what is actually dependent on?)
	☐	add other basic directives (switch)
	☐	review the number of placeholder text nodes

	☐	need a better way to control css via data properties (short of setting classes, or even css binding)
	☐	property attribute case conversion? (e.g. $foo-bar to fooBar)
	☐	some bindings should only set if the value changed (like attributes and maybe text)
	☐	constant attribute binding, for example $index="2", or data-text="{1 + 2 * 4}"

need usecase:

	☐	directive attributes/options. for example: [strictmapping, foo(123)]#foreach (item in list)
	☐	<style> binding
	☐	behaviors (redesign? need some solution for sprite element for sure)
	☐	event dispatcher revamp
	☐	observable object (passive style, maybe just a event regist)
	☐	component wise <script> (data object prototype)
	☐	what happens when detached (fully, or if the custom element detached, maybe just clear the binding?)
	☐	any error logging needed.
	☐	would be nice if event binding syntax look nicer (get rid of $e, or $e.details.data, essentially it needs another syntactic sugar to ref data from event more easily)
	✔	foreach should allow passing down more properties (or should it do that automatically? like copy all props from the parent?) @done (17-03-25 22:24)

-----------------------------------------------------------------------

backlog:

	☐	should we allow certain component only refresh when property changed?



-----------------------------------------------------------------------

	☐	route init() (should renamed to loaded()), add all objects to the map, then call loaded() on them.
	✔	opportunity based combat actions @done (16-10-15 22:43)

	☐	convert world update to use the LatentUpdater
		
	☐	add sprites ref func $img()
	✔	replace isatlocal with partylocal : local, since it s exclusive, or make isatlocal exclusive @done (16-10-15 22:43)
	✔	change locale to locale within relationship to a more generic relationship and fix the find potential travel origin to check single connection special case rather than within relation @done (16-10-15 22:43)
	☐	objects set by find references should have $ref set to true (?)
	☐	image setting in template


	✔	basic scene layout @done (14-09-17 21:10)
	✔	sprites positioning @done (14-09-17 21:10)

	✔	create all locals @done (14-04-01 22:54)
	✔	activities @done (14-04-01 22:54)
	✔	states @done (14-04-01 22:54)
	✔	quests @done (14-04-01 22:54)
	✔	fix quest.goal parsing code @done (14-04-01 23:15)
	✔	update definition code @done (14-04-01 22:54)

	✔	make $p more friendly just put function in param list and make it $ref @done (14-04-01 22:54)
	✔	hasExplored func (can just return false for now) @done (14-04-02 20:47)
	✔	getPotentialTravelOrigins @done (14-04-02 21:39)
	✔	Player.beginPlanPhase, UI, interaction @done (14-04-05 00:14)

	✔	activity merge @done (14-04-05 00:14)

UI:
	✔	may get rid of addchild concept so it doesn't matter where in the chain addchild is called... @done (16-10-15 22:42)
	✔	get rid of game query @done (16-12-23 23:12)

Future:
	☐	better expression($e) imp
	✔	hasExplored real imp @done (16-10-15 22:42)
	☐	upgrade to latest head.js

