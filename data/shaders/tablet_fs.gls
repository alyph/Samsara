#version 450 core

uniform sampler2DArray Atlas;

// Interpolated values from the vertex shaders
flat in vec4 inColor1;
flat in vec4 inColor2;
in vec2 inUV;
// flat in int inPage;
flat in int inCode;

// Ouput data
out vec4 color;

void main()
{
	// TODO: maybe we should handle this implicitly by making sure 
	// the glyph of this location on the atlas is always empty?
	if (inCode == 0)
	{
		color.rgb = inColor1.rgb * inColor1.a;
		color.a = inColor1.a;
	}
	else
	{
		float eps = (1.0 / 32.0);
		vec2 min_uv = vec2(eps, eps);
		vec2 max_uv = vec2(1.0 - eps, 1.0 - eps);

		vec2 glyph_uv = fract(inUV);
		// TODO: this is so we may have the full 1.0, not sure if needed??
		if (glyph_uv.x == 0 && inUV.x > 0) { glyph_uv.x = 1.0; }
		if (glyph_uv.y == 0 && inUV.y > 0) { glyph_uv.y = 1.0; }
		glyph_uv = clamp(glyph_uv, min_uv, max_uv);
		ivec2 glyph_coords = ivec2(inCode % 16, 15 - ((inCode / 16) & 0x0f));
		vec2 atlas_uv = (vec2(glyph_coords) + glyph_uv) / 16.0;	
		int page = (inCode >> 8);
		vec4 atlas_color = texture(Atlas, vec3(atlas_uv.xy, page));

		float fore_a = atlas_color.r * inColor2.a;
		float back_a = inColor1.a;
		// output premultiplied alpha
		// http://www.rw-designer.com/entry/1137
		// http://apoorvaj.io/alpha-compositing-opengl-blending-and-premultiplied-alpha.html
		color.a = back_a * (1 - fore_a) + fore_a;
		if (color.a <= 0.01) discard;
		color.rgb = inColor1.rgb * back_a * (1 - fore_a) * back_a + inColor2.rgb * fore_a;
	}
}
