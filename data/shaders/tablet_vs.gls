#version 450 core

// Input vertex data, different for all executions of this shader.
in ivec2 VertexPos;
in ivec2 Coordinates;
in ivec2 Dimensions;
in vec4 Color1;
in vec4 Color2;
in int Page;
in int Code;

// Out to fs
flat out vec4 inColor1;
flat out vec4 inColor2;
out vec2 inUV;
flat out int inPage;
flat out int inCode;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform ivec2 TabletDims;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	// float scale = 1.0;
	// vec2 offset = vec2(TabletDims) * -0.5;
	// vec3 pos = vec3((VertexPos + Coordinates + offset) * scale, 0);
	// vec3 pos = vec3(float(VertexPos.x) * 0.0000000005, float(VertexPos.y) * 0.0000000005,0);
	// vec3 pos = vec3(float(VertexPos.x), float(VertexPos.y),0) * 0.5;
	// gl_Position =  vec4(pos * 0.5,1.0);//MVP * vec4(pos,1);
	// gl_Position =  MVP * vec4(pos, 1);
	// to clip space directly
	// TODO: add z
	vec2 coords_flipped = vec2(Coordinates.x, TabletDims.y - Coordinates.y - Dimensions.y);
	gl_Position = vec4((vec2(VertexPos * Dimensions + coords_flipped) * 2.0 / vec2(TabletDims)) - vec2(1, 1), 0, 1);
	
	// inColor1 = vec4(VertexPos.xy, 0, 1);
	inColor1 = Color1;
	inColor2 = Color2;
	inPage = Page;
	inCode = Code;
	//ivec2 atlas_coords = ivec2(Code % 16, 15 - (Code / 16)) + VertexPos;
	inUV = vec2(VertexPos * Dimensions);
	// float eps = (1.0 / 32.0);
	// vec2 min_uv = vec2(eps, eps);
	// vec2 max_uv = vec2(1.0 - eps, 1.0 - eps);
	// vec2 uv = clamp(vec2(VertexPos), min_uv, max_uv);
	// ivec2 atlas_coords = ivec2(Code % 16, 15 - (Code / 16));
	//inUV = (vec2(16.0, 16.0) / vec2(atlas_coords));
	// inUV = (vec2(atlas_coords) + uv) / 16.0;
	//inCode = Code;
	//inUV = vec2(VertexPos);
	//inUV = vec2(VertexPos) * 0.0625 + vec2(0.0625, 0.0625);
}

